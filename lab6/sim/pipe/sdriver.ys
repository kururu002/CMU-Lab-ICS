#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $4, %eax		# src and dst have 4 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#Name:Bo-Han Huang
#ID:515030910252
# Describe how and why you modified the baseline code.
#using iaddl and Unroll loop by 2 to improve performance
#It can be optimized if there's more branch(which means more codes) or better jumping instructions  
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	iaddl $-2,%edx		# len <= 2?
	jge Loop
	jmp Remain

Loop:	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle Plus0		# if so, goto Plus0:
Plus1:	mrmovl 4(%ebx), %esi	# read val from src...
	rmmovl %esi, 4(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val > 0?
	jg Plus02		# if so, goto Plus02:
Plus01: iaddl $1,%eax
	iaddl $8,%ebx
	iaddl $8,%ecx
	iaddl $-2, %edx		# len-=2
	andl %edx,%edx		# len > 0?
	jge Loop			# if so, goto Loop:
	jmp Remain
Plus0:	mrmovl 4(%ebx), %esi	# read val from src...
	rmmovl %esi, 4(%ecx)	# ...and store it to dst
	andl %esi, %esi		# val > 0?
	jg Plus01		#if so, goto Plus01
Plus00:	iaddl $8,%ebx
	iaddl $8,%ecx
	iaddl $-2, %edx		# len-=2
	andl %edx,%edx		# len > 0?
	jge Loop		# if so, goto Loop:
	jmp Remain

Plus02:	iaddl $2,%eax
	iaddl $8,%ebx
	iaddl $8,%ecx
	iaddl $-2, %edx		# len-=2
	andl %edx,%edx		# len > 0?
	jge Loop		# if so, goto Loop:
	


Remain:	iaddl $2,%edx		#recover real edx
	andl %edx,%edx		#if len==0
	je Done			#goto Done
	mrmovl (%ebx), %esi	# read val from src...
	rmmovl %esi, (%ecx)	# ...and store it to dst
	andl %esi, %esi		# val <= 0?
	jle GOGO		#jmp over next instruction
	iaddl $1,%eax
GOGO:	iaddl $4,%ebx
	iaddl $4,%ecx
	iaddl $-1,%edx
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long -1
	.long 2
	.long 3
	.long -4
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
